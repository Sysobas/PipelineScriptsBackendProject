timestamps {
    def tag="blue"
    def altTag="green"
    node('nodejs') {
        stage('Checkout'){
            checkout scm
            //checkout([$class: 'GitSCM', branches: [[name: '*/aks']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/cmotta2016/PipelineScriptsBackendProject.git']]])
        }
        stage('Compile with Azure Artifacts'){
            //sh 'npm config set registry=https://pkgs.dev.azure.com/carlosmotta0608/cicd/_packaging/npm-feed/npm/registry/'
            sh 'npm config set registry=https://pkgs.dev.azure.com/dvopsusroi/_packaging/dvopsusroi/npm/registry/'
            sh 'npm config set always-auth=true'
            sh 'cp /opt/npm/.npmrc /home/jenkins/'
            sh 'npm install'
        }
        stage ('Test'){
            sh 'npm test'
        }
        stage ('Code Quality'){
            def sonar = load 'sonar.groovy'
            sonar.codeQuality()
        }
        stage('Quality Gate'){
            sleep(15)
            timeout(activity: true, time: 15, unit: 'SECONDS') {
                def qg = waitForQualityGate()
                if (qg.status.toUpperCase() == 'ERROR') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }
        stage('Build with S2I'){
            sh 's2i build . cmotta2016/nodejs-10-bases2i:latest clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --loglevel 5 --network host --env npm_config_registry=https://pkgs.dev.azure.com/dvopsusroi/_packaging/dvopsusroi/npm/registry/ --inject /opt/npm:/opt/app-root/src'
        }
        stage('Push Image to ACR'){
            withCredentials([usernamePassword(credentialsId: 'acr-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
            sh '''
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" clusteraksregistryoi.azurecr.io
            docker tag clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} clusteraksregistryoi.azurecr.io/node-app:latest
            docker push clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER}
            docker push clusteraksregistryoi.azurecr.io/node-app:latest
            docker rmi -f clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} clusteraksregistryoi.azurecr.io/node-app:latest
            '''
            }
        }
        stage('Deploy QA'){
            sh 'kubectl config set-context nodejs-qa --namespace=nodejs-qa && kubectl config use-context nodejs-qa'
            def deployment = sh(script: "kubectl get deployment nodejs -o jsonpath='{ .metadata.name }' --ignore-not-found", returnStdout: true).trim()
            if (deployment == "nodejs") {
                sh 'kubectl set image deployment/nodejs nodejs=clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --record'
            }
            else {
                sh 'kubectl create -f aks-nodejs.yaml --validate=false -l env!=hml'
                sh 'kubectl set image deployment/nodejs nodejs=clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --record'
            }
            sh 'kubectl rollout status deployment.apps/nodejs'
        }
        stage('Promote to HML'){
            routeHost = sh(script: "kubectl get ingress nodejs -o jsonpath='{ .spec.rules[0].host }'", returnStdout: true).trim()
            input message: "Test deployment: http://${routeHost}. Promote to HML. Approve?", id: "approval"
            //input message: "Promote to HML. Approve?", id: "approval"
        }
        stage('Deploy HML'){
            sh 'kubectl config set-context nodejs-hml --namespace=nodejs-hml && kubectl config use-context nodejs-hml'
            def deployment = sh(script: "kubectl get deployment nodejs -o jsonpath='{ .metadata.name }' --ignore-not-found", returnStdout: true).trim()
            if (deployment == "nodejs") {
                sh 'kubectl set image deployment/nodejs nodejs=clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --record'
            }
            else {
                sh "kubectl create -f aks-nodejs.yaml --validate=false --dry-run -o yaml | sed 's/qa/hml/g' | kubectl apply --validate=false -f -"
                sh 'kubectl set image deployment/nodejs nodejs=clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --record'
            }
            sh 'kubectl rollout status deployment.apps/nodejs'
        }
        stage('Promote to PRD'){
            routeHost = sh(script: "kubectl get ingress nodejs -o jsonpath='{ .spec.rules[0].host }'", returnStdout: true).trim()
            input message: "Test deployment: http://${routeHost}. Promote to HML. Approve?", id: "approval"
            //input message: "Promote to PRD. Approve?", id: "approval"
        }
        stage('Deploy PRD'){
            sh 'kubectl config set-context nodejs-prd --namespace=nodejs-prd && kubectl config use-context nodejs-prd'
            def svc = sh(script: "kubectl get svc nodejs-service -o jsonpath='{ .spec.selector.role }' --ignore-not-found", returnStdout: true).trim()
            if (svc == "blue"){
                tag="green"
                altTag="blue"
                echo "Executando Rollout no Deployment ${tag}"
                sh "kubectl set image deployment/${tag}-nodejs nodejs=clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --record"
                sh "kubectl rollout status deployment.apps/${tag}-nodejs"
            }
            else {
                if (svc == "green") {
                    echo "Executando Rollout no Deployment ${tag}"
                    sh "kubectl set image deployment/${tag}-nodejs nodejs=clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --record"
                    sh "kubectl rollout status deployment.apps/${tag}-nodejs"
                }
                else {
                    echo "NÃ£o Existe"
                    sh 'kubectl apply -f aks-blue-green.yaml --validate=false'
                    sh "kubectl set image deployment/${tag}-nodejs nodejs=clusteraksregistryoi.azurecr.io/node-app:${BUILD_NUMBER} --record"
                    sh "kubectl rollout status deployment.apps/${tag}-nodejs"
                }
            }
        }
        stage('Test Deployment'){
            routeHost = sh(script: "kubectl get ingress ${tag}-nodejs -o jsonpath='{ .spec.rules[0].host }'", returnStdout: true).trim()
            input message: "Test deployment: http://${routeHost}. Approve?", id: "approval"
        }
        stage('Go Live'){
            sh """kubectl patch svc nodejs-service --type='json' -p='[{"op": "replace", "path": "/spec/selector/role", "value":"${tag}"}]'"""
        }
    }
}
